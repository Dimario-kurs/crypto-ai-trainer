# === run_live_simulation.py ===
import ccxt
import torch
import torch.nn as nn
import numpy as np
import joblib
import time

# === 1. –ú–æ–¥–µ–ª—å ===
class Net(nn.Module):
    def __init__(self, input_size, hidden=64, num_classes=3):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(input_size, hidden),
            nn.ReLU(),
            nn.Linear(hidden, num_classes)
        )
    def forward(self, x):
        return self.net(x)

# === 2. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ scaler ===
scaler = joblib.load("scaler.pkl")

dummy_input_size = 23  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—á–µ–π (24 - time - y)
model = Net(input_size=dummy_input_size)
model.load_state_dict(torch.load("model.pth"))
model.eval()

# === 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ Binance ===
exchange = ccxt.binance()
symbol = "BTC/USDT"
timeframe = "15m"

# === 4. –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ ===
balance = 1000.0   # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT
trade_size = 10.0  # —Å—É–º–º–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
position = None    # —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è (None, "long", "short")
entry_price = 0.0

print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")

for i in range(96):  # –ø—Ä–∏–º–µ—Ä–Ω–æ 1 —Å—É—Ç–∫–∏ –ø–æ 15–º —Å–≤–µ—á–∞–º
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ 100 —Å–≤–µ—á–µ–π
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=100)
    last_candle = ohlcv[-1]  # [timestamp, open, high, low, close, volume]

    # –î–µ–ª–∞–µ–º —Ñ–∏—á–∏ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω–∞ –∏ –æ–±—ä–µ–º)
    features = np.array([
        last_candle[1],  # open
        last_candle[2],  # high
        last_candle[3],  # low
        last_candle[4],  # close
        last_candle[5]   # volume
    ], dtype=np.float32).reshape(1, -1)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    features = scaler.transform(features)

    # –ü—Ä–æ–≥–Ω–æ–∑
    x_tensor = torch.tensor(features, dtype=torch.float32)
    with torch.no_grad():
        pred = model(x_tensor)
        action = pred.argmax(1).item()  # 0=SELL, 1=HOLD, 2=BUY (—Å —É—á–µ—Ç–æ–º —Å–¥–≤–∏–≥–∞)

    price = last_candle[4]

    # === –õ–æ–≥–∏–∫–∞ —Å–¥–µ–ª–æ–∫ ===
    if action == 2 and position is None:  # BUY
        position = "long"
        entry_price = price
        balance -= trade_size
        print(f"[{i}] –ü–æ–∫—É–ø–∫–∞ –ø–æ {price:.2f}, –±–∞–ª–∞–Ω—Å={balance:.2f}")
    elif action == 0 and position == "long":  # SELL
        profit = trade_size * (price / entry_price)
        balance += profit
        print(f"[{i}] –ü—Ä–æ–¥–∞–∂–∞ –ø–æ {price:.2f}, –ø—Ä–∏–±—ã–ª—å={profit-trade_size:.2f}, –±–∞–ª–∞–Ω—Å={balance:.2f}")
        position = None
    else:
        print(f"[{i}] –î–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é ({'–Ω–µ—Ç' if position is None else position}), —Ü–µ–Ω–∞={price:.2f}")

    time.sleep(1)  # –∏–º–∏—Ç–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–≤–µ—á–∏ (–≤ —Ä–µ–∞–ª–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å 60*15)

print(f"üèÅ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å={balance:.2f} USDT")



